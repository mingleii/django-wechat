# -*- coding: utf-8 -*-
"""
Django settings for smallsite project.

Generated by 'django-admin startproject' using Django 1.9.

For more information on this file, see
https://docs.djangoproject.com/en/1.9/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.9/ref/settings/
"""

import os
from pythonjsonlogger import jsonlogger

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
PROJECT_ROOT = os.path.abspath(os.path.join(os.path.dirname(__file__),
                                            os.pardir))

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.9/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '_h2)yhinz8af)(i)yk=!l!*=2z9b8!qjcevq(gw1+ceo7cvxb0'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ["127.0.0.1", "localhost", "www.smallsite.cn", "123.206.63.56",
                 "112.82.240.216","192.168.197.166", "smallsite.vicp.io",
                 "xn--o2rr70en5m.xn--ses554g", "home.ilojoli.com",
                 "www.ilojoli.com", "192.168.169.163"]

SITE_HOST = "http://www.smallsite.cn"

SITE_NAME = 'smallsite'

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework.authtoken',
    'import_export',
    'ckeditor',
    'pygments',
    'pythonjsonlogger',

    'wechat',

]

MIDDLEWARE_CLASSES = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'crum.CurrentRequestUserMiddleware'
]

ROOT_URLCONF = 'smallsite.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates'),
                 os.path.join(BASE_DIR, 'blog/templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'smallsite.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.9/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/1.9/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# AUTH
AUTHENTICATION_BACKENDS = ('utils.email_auth.EmailOrUsernameModelBackend',
                           'django.contrib.auth.backends.ModelBackend',)

# REST_FRAMEWORK settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.TokenAuthentication',
    ),
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
    ),
    'DEFAULT_PARSER_CLASSES': (
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.FormParser',
        'rest_framework.parsers.MultiPartParser',
    ),
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10,
    'MAX_PAGE_SIZE': 100,
    'DATETIME_FORMAT': '%Y-%m-%d %H:%M:%S',
    'DATE_FORMAT': '%Y-%m-%d',
}

# Internationalization
# https://docs.djangoproject.com/en/1.9/topics/i18n/

TIME_ZONE = 'Asia/Shanghai'

LANGUAGE_CODE = "zh-Hans"

USE_I18N = True

USE_L10N = True

USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.9/howto/static-files/

STATIC_URL = '/static/'

STATIC_ROOT = os.path.join(BASE_DIR, 'static')

# STATICFILES_DIRS = (
#     os.path.join(BASE_DIR, "static"),
# )

MEDIA_URL = '/media/'

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

ADMINS = (
    ('minglei.weng', 'minglei.weng@qq.com'),
)

REDIS_URL = "127.0.0.1:6379"

REDIS_DB = 0

REDIS_PASSWD = None

REDIS_DELETE_KES = []

BACKEND_SERVER = False

APSCHEDULER = True

# Email
EMAIL_ENABLE = False

EMAIL_SUB_ENABLES = [
    "wechat_new_user",  # 微信新用户关注
    "wechat_old_user",  # 微信老用户再次关注
]

EMAIL_CONFIG = {
    "title": "",       # 默认邮件标题
    "sender": "",      # 默认发送邮箱
    "receiver": "",    # 默认接收邮箱，多个请使用List类型
    "server_ip": "",      # 默认邮箱服务地址
    "server_port": "",      # 默认邮箱服务端口
    "username": "",    # 默认发送邮箱用户名
    "passwd": ""          # 默认发送邮箱密码
}


try:
    from .local_conf import *
except:
    pass

try:
    from .server_conf import *
except:
    pass

# Caching
CACHES = {
    'default': {
        'BACKEND': 'redis_cache.RedisCache',
        'LOCATION': [REDIS_URL],
        'OPTIONS': {
            'DB': REDIS_DB,
            'CONNECTION_POOL_CLASS': 'redis.BlockingConnectionPool',
            'CONNECTION_POOL_CLASS_KWARGS': {
                'max_connections': 200,
                'timeout': 20,
            },
            'MAX_CONNECTIONS': 1000,
            'PICKLE_VERSION': -1,
        },
    },
}

LOGGING_PATH = os.path.join(PROJECT_ROOT, "logs")

# 日志依赖于settings 生效,放到最后面
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'json': {
            '()': jsonlogger.JsonFormatter,
            'fmt': '%(levelname)s %(asctime)s %(process)d %(message)s',
            # 'format': '[%(asctime)s] %(levelname)s: %(message)s',
        },
        'verbose': {
            'format': '[%(asctime)s] %(levelname)s: %(message)s'
        },
        'error': {
            '()': jsonlogger.JsonFormatter,
            'fmt': '%(levelname)s %(asctime)s %(module)s %(process)d %(message)s %(pathname)s $(lineno)d $(funcName)s',
        },
    },
    'filters': {
    },
    'handlers': {
        'access_file_log': {
            'level': 'DEBUG' if DEBUG else 'INFO',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': os.path.join(LOGGING_PATH, "smallsite_run.log"),
            'formatter': 'json',
            'when': 'midnight',
        },
        'error_file_log': {
            'level': 'ERROR',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': os.path.join(LOGGING_PATH, "smallsite_error.log"),
            'formatter': 'verbose',
            'when': 'midnight',
        },
    },
    'loggers': {
        'default': {
            'handlers': ['access_file_log'],
            'level': 'DEBUG' if DEBUG else 'INFO',
        },
        'error': {
            'handlers': ['error_file_log'],
            'level': 'ERROR',
        }
    }
}
